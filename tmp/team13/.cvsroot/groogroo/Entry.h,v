head	1.7;
access;
symbols
	Penult:1.7
	ThirdWorkingVersion:1.7
	SecondWorkingVersion:1.7
	InitialWorkingVersion:1.7;
locks; strict;
comment	@ * @;


1.7
date	98.10.04.02.27.25;	author team13;	state Exp;
branches;
next	1.6;

1.6
date	98.10.04.00.29.05;	author team13;	state Exp;
branches;
next	1.5;

1.5
date	98.10.03.23.52.25;	author team13;	state Exp;
branches;
next	1.4;

1.4
date	98.10.03.21.30.16;	author team13;	state Exp;
branches;
next	1.3;

1.3
date	98.10.03.21.05.32;	author team13;	state Exp;
branches;
next	1.2;

1.2
date	98.10.03.20.39.12;	author team13;	state Exp;
branches;
next	1.1;

1.1
date	98.10.03.20.20.54;	author team13;	state Exp;
branches;
next	;


desc
@@


1.7
log
@""
@
text
@#ifndef _ENTRY_H_
#define _ENTRY_H_

#include "Thing.h"
#include "Traj.h"
#include "Ship.h"
#include "Collision.h"
#include "FuelTraj.h"

class Entry {
 public:
  // The thing to which this entry refers
  CThing *thing;

  // The velocity trajectory we eventually want to be on and the fuel
  // of the current move.
  FuelTraj fueltraj;
  // The amount of fuel the trip to the thing is likely to take
  double total_fuel;

  // The number of turns the trip is likely to take
  double turns_total;

  // The first collision on the way
  Collision collision;

  // The ship number of the mech which is going after this object this
  // turn.
  int claimed_by_mech;
  
  Entry();
  ~Entry();
};

#endif
@


1.6
log
@*** empty log message ***
@
text
@a23 4
  // This turn's order to get us on the way
  OrderKind order_type;
  double order_mag;

@


1.5
log
@""
@
text
@d34 3
@


1.4
log
@*** empty log message ***
@
text
@d8 1
d14 4
d19 2
a20 3
  double fuel_total;
  // The amount of fuel this turn's orders will take
  double fuel_this_turn;
d23 1
d27 2
d30 1
a30 2
  // The velocity trajectory we eventually want to be on
  CTraj goal_trajectory;
@


1.3
log
@*** empty log message ***
@
text
@d22 1
a22 1
  Collision *collision;
a27 3

  Entry();
  ~Entry();
@


1.2
log
@*** empty log message ***
@
text
@d7 1
d22 1
a22 3
  // The first collision on the way
  CThing *collision_thing;
  double collision_when;
@


1.1
log
@Entry.h
@
text
@d32 1
a32 1
}
@

