head	1.11;
access;
symbols
	Penult:1.11
	ThirdWorkingVersion:1.10
	SecondWorkingVersion:1.10
	InitialWorkingVersion:1.10;
locks; strict;
comment	@ * @;


1.11
date	98.10.04.15.58.29;	author team13;	state Exp;
branches;
next	1.10;

1.10
date	98.10.04.07.03.09;	author team13;	state Exp;
branches;
next	1.9;

1.9
date	98.10.04.06.46.02;	author team13;	state Exp;
branches;
next	1.8;

1.8
date	98.10.04.06.21.08;	author team13;	state Exp;
branches;
next	1.7;

1.7
date	98.10.04.04.59.22;	author team13;	state Exp;
branches;
next	1.6;

1.6
date	98.10.04.02.27.26;	author team13;	state Exp;
branches;
next	1.5;

1.5
date	98.10.04.00.29.06;	author team13;	state Exp;
branches;
next	1.4;

1.4
date	98.10.03.17.07.12;	author team13;	state Exp;
branches;
next	1.3;

1.3
date	98.10.03.16.44.02;	author team13;	state Exp;
branches;
next	1.2;

1.2
date	98.10.03.16.00.50;	author team13;	state Exp;
branches;
next	1.1;

1.1
date	98.10.03.15.51.56;	author team13;	state Exp;
branches;
next	;


desc
@@


1.11
log
@""
@
text
@#include "GetVinyl.h"
#include "Team.h"
#include "FuelTraj.h"
#include "Thing.h"
#include "Groogroo.h"
#include "MagicBag.h"
#include "Ship.h"
#include "Asteroid.h"
#include "Station.h"

GetVinyl::GetVinyl()
{ 
}

GetVinyl::~GetVinyl()
{ }


void GetVinyl::Decide()
{
  pShip->ResetOrders();

  //can't fire and drive cause of alcohol breath
  CTeam *pmyTeam = pShip->GetTeam();
  CWorld *pmyWorld = pmyTeam->GetWorld();

  UINT shipnum=pShip->GetShipNumber();
  MagicBag *mbp=((Groogroo *)pmyTeam)->mb;

  Entry *e;
  Entry *best_e=NULL;

  double cur_shields=pShip->GetAmount(S_SHIELD);
  double cur_fuel=pShip->GetAmount(S_FUEL);
  double cur_cargo=pShip->GetAmount(S_CARGO);
  double max_fuel=pShip->GetCapacity(S_FUEL);
  double max_cargo=pShip->GetCapacity(S_CARGO);

  BOOL lock_orders = 0;

  // Collision Handling.
  for (UINT thing_i=pmyWorld->UFirstIndex; thing_i <= pmyWorld->ULastIndex; thing_i=pmyWorld->GetNextIndex(thing_i)) {
    CThing *athing=pmyWorld->GetThing(thing_i);
    if(athing == NULL || !(athing->IsAlive())) {
      continue;
    } 

    ThingKind kind = athing->GetKind();
    if (kind == GENTHING) {
      continue;
    } 
    
    double turns = pShip->DetectCollisionCourse(*athing);
    if(turns < 0.0) {
      continue;
    }

    // Collision next turn
    if(turns < 2.0) {
      if(((kind == STATION) && 
	  (((CStation*)athing)->GetTeam()->GetTeamNumber() !=
	   pmyTeam->GetTeamNumber())) && 
	 (pShip->GetAmount(S_CARGO) > 0.01)) {
	// if its enemy base and we have vinyl
	printf("Jabba will not take kindly to this!\n");
	pShip->SetJettison(VINYL, cur_cargo);
	lock_orders=1;
      } else if (kind == ASTEROID) {
	if((((CAsteroid*)athing)->GetMaterial() == URANIUM)) {
	  if(athing->GetMass() <= max_fuel) {
	    // uranium less than max fuel
	    pShip->SetOrder(O_SHIELD, athing->GetMass() - (max_fuel - cur_fuel));
	    lock_orders=1;
	  } else {
	    // uranium greater than max fuel
	    // WRITE this later! (shoot the asteroid)
	  }
	} else {
	  if((athing->GetMass() <= max_cargo)) {
	    if(athing->GetMass() >= (max_cargo-cur_cargo)) {
	      // fits in cargo hold but we're holding too much
	      // WRITE this later (maximum packing)
	    } else {
	      // it fits, just ram it, do nothing
	    }
	  } else {
	    // doesn't fit in cargo hold
	    // WRITE this later! (shoot the asteroid)
	  }
	}
      } else if(kind == SHIP) {
	if((((CShip*)athing)->GetTeam()->GetTeamNumber() !=
	    pmyTeam->GetTeamNumber())) {
	  //enemy ship
	  // WRITE this later! (shoot it)
	} else {
	  //our ship
	  // back away from the keyboard
	  //	  pShip->SetOrder(O_THRUST, -1);
	  //      lock_orders=1;
	}
      }
      break;
    } else if(turns<3.0) {
      if(((kind == STATION) && 
	  (((CStation*)athing)->GetTeam()->GetTeamNumber() !=
	   pmyTeam->GetTeamNumber())) && 
	 (pShip->GetAmount(S_CARGO) > 0.01)) {
	// if its enemy base and we have vinyl
	// turn away for jettison
	printf("Turning away from their base!\n");
	pShip->SetOrder(O_TURN, PI); // should check where we are pointing
	lock_orders=1;
      } else if(kind == ASTEROID) {
	if((((CAsteroid*)athing)->GetMaterial() == URANIUM)) {
	  if(athing->GetMass() <= max_fuel) {
	    // uranium less than max fuel, do nothing
	  } else {
	    // uranium greater than max fuel
	    // SHOOT IT (later)
	  }
	} else {
	  if((athing->GetMass() <= max_cargo)) {
	    if(athing->GetMass() >= (max_cargo-cur_cargo)) {
	      // fits in cargo hold but we're holding too much, do nothing
	    } else {
	      // vinyl fits, just ram it, do nothing
	    }
	  } else {
	    // vinyl doesn't fit in cargo hold
	    // SHOOT IT (later)
	  }
	}
      } else if(kind == SHIP) {
	if((((CShip*)athing)->GetTeam()->GetTeamNumber() !=
	    pmyTeam->GetTeamNumber())) {
	  //enemy ship
	  // SHOOT IT (later)
	} else {
	  //our ship, do nothing
	}
      }
      break;
    }
  }

  // get vinyl or fuel
   if(!lock_orders) {
     AsteroidKind prefered_asteroid;
     if(!(((cur_fuel <= 5.0) && ((((Groogroo*)pmyTeam)->uranium_left > 0.0))) || ((((Groogroo*)pmyTeam)->vinyl_left < 0.01) && (((Groogroo*)pmyTeam)->uranium_left > 0.0)))) {
       prefered_asteroid = VINYL;
     } else {
       prefered_asteroid = URANIUM;
     }

    if((pShip->GetAmount(S_CARGO) > 13.01) || ((((Groogroo*)pmyTeam)->vinyl_left < 0.01) && (pShip->GetAmount(S_CARGO) > 0.01))) {
      
      //make the return to station better
      for(UINT j=0;j<50;j++) {
	FuelTraj ft=((Groogroo *)pmyTeam)->determine_orders(pmyTeam->GetStation(), j, pShip);
	if(ft.fuel_used >= 0.0) {
	  pShip->SetOrder(ft.order_kind,ft.order_mag);
	  break;
	}
      }
      
    } else {
      
      UINT i=0;
      for(e=mbp->getEntry(shipnum, 0);e!=NULL;e=mbp->getEntry(shipnum, i),i++) {
	if(e->thing != NULL) {
	  if((e->thing->GetKind()) != ASTEROID) {
	    continue;
	  } else if(((CAsteroid *)(e->thing))->GetMaterial() != prefered_asteroid) {
	    continue;
	  }
	  
	  //	  if(e->claimed_by_mech == 1) {
	  // continue;
	  //}

	  //	if((best_e == NULL) || ((e->fueltraj).traj.rho < (best_e->fueltraj).traj.rho)) {
	  if((best_e == NULL) || (e->turns_total < best_e->turns_total)) {
	    best_e=e;
	  }
	}
      }
      if(best_e != NULL) {
	pShip->SetOrder((best_e->fueltraj).order_kind,(best_e->fueltraj).order_mag);
	//best_e->claimed_by_mech=1;
       }
    }      
  }

  
double fuel_used = pShip->GetOrder(O_SHIELD) + pShip->GetOrder(O_LASER) + pShip->GetOrder(O_THRUST) + pShip->GetOrder(O_TURN) + pShip->GetOrder(O_JETTISON);
  cur_fuel-=fuel_used;  
  if( cur_shields < 11.0) {
    cur_fuel-=5.0; // save an emergency tank
    double wanted_shields=11.0-cur_shields;
    pShip->SetOrder(O_SHIELD, 
		    (wanted_shields < cur_fuel) ? wanted_shields : cur_fuel);
  }

}
@


1.10
log
@""
@
text
@d8 2
d21 2
a23 1

d33 24
a56 1
  if(pShip->GetAmount(S_CARGO) > 0.01) {
d58 86
a143 6
    FuelTraj ft=((Groogroo *)pmyTeam)->determine_orders(pmyTeam->GetStation(), 10, pShip);
    printf("Ima Goin Home: %d %g\n", ft.order_kind, ft.order_mag);
    if(ft.fuel_used >= 0.0) {
      pShip->SetOrder(ft.order_kind,ft.order_mag);
    } else {
      printf("Awe shucks\n");
d145 1
a145 2
    
  } else {
d147 39
a185 10
    UINT i=0;
    printf("Entering Loop.\n");
    for(e=mbp->getEntry(shipnum, 0);e!=NULL;e=mbp->getEntry(shipnum, i),i++) {
      if(e->thing != NULL) {
	if((e->thing->GetKind()) != ASTEROID) {
	  continue;
	}
	if((best_e == NULL) || ((e->fueltraj).traj.rho < (best_e->fueltraj).traj.rho)) {
	  best_e=e;
	  printf("Accept.\n");
d188 15
a202 7
    }
    
    pShip->ResetOrders();
    if(best_e != NULL) {
      printf("Setting Order.\n");
      pShip->SetOrder((best_e->fueltraj).order_kind,(best_e->fueltraj).order_mag);
    }
d204 1
@


1.9
log
@""
@
text
@d7 1
d30 23
a52 14
  UINT i=0;
  printf("Entering Loop.\n");
  for(e=mbp->getEntry(shipnum, 0);e!=NULL;e=mbp->getEntry(shipnum, i),i++) {
    printf("Found an Thing.\n");
    if(e->thing != NULL) {
      if((e->thing->GetKind()) != ASTEROID) {
	continue;
      }
      printf("Found an Good Thing (was Asteroid).\n");
      if((best_e == NULL) || ((e->fueltraj).traj.rho < (best_e->fueltraj).traj.rho)) {
	best_e=e;
	printf("Accept.\n");
      } else {
	printf("Reject.\n");
d55 6
a60 6
  }

  pShip->ResetOrders();
  if(best_e != NULL) {
    printf("Setting Order.\n");
    pShip->SetOrder((best_e->fueltraj).order_kind,(best_e->fueltraj).order_mag);
@


1.8
log
@""
@
text
@a19 1
  //double fuel;
d30 1
d32 1
d37 1
a37 1
      printf("Found an Asteroid.\n");
@


1.7
log
@""
@
text
@d26 1
d29 1
a30 1
  printf("pulling from magic bag: %d\n", time(NULL));
d32 11
a42 5
    if((e->thing->GetKind()) != ASTEROID) {
      continue;
    }
    if((best_e == NULL) || ((e->fueltraj).traj.rho < (best_e->fueltraj).traj.rho)) {
      best_e=e;
d45 1
a45 1
  printf("done pulling from magic bag(%d): %d\n", i, time(NULL));
d48 1
@


1.6
log
@""
@
text
@d24 2
a25 2
  int shipnum=pShip->GetShipNumber();
  MagicBag mbp=((Groogroo *)pmyTeam)->mb;
d28 4
a31 2
  for(int i=0,e=mbp->GetEntry(shipnum, i);e!=NULL;e=mbp->GetEntry(shipnum, i),i++) {
    if(e->thing->GetKind() != ASTEROID) {
d38 1
d41 1
a41 1
    pShip->SetOrder(best_e->fueltraj->order_kind,best_e->fueltraj->order_mag);
@


1.5
log
@*** empty log message ***
@
text
@d6 1
d18 3
a20 2
  static int flag=0;
  double fuel;
d24 6
a29 3
  for (UINT thing_i=0; thing_i<UINT(-1); thing_i=pmyWorld->GetNextIndex(thing_i)) {
    CThing *thing=pmyWorld->GetThing(thing_i);
    if(thing->GetKind() != ASTEROID) {
d32 2
a33 3
    FuelTraj ft=((Groogroo *)pmyTeam)->determine_orders(thing, 10, pShip);
    if(ft.fuel_used >= 0) {
      break;
d36 4
a39 1
  
@


1.4
log
@*** empty log message ***
@
text
@d3 3
d21 10
a30 5
  if(flag >= 4) {
    fuel=pShip->SetOrder(O_THRUST,rand() / float(RAND_MAX) * 30.0);
  } else {
    fuel=pShip->SetOrder(O_TURN,rand() / float(RAND_MAX) * PI);
    flag ++;
a32 1
  sprintf(pmyTeam->MsgText, "Fuel Used: %g\n", fuel);
@


1.3
log
@*** empty log message ***
@
text
@a13 1

d18 1
a18 1
  if(flag < 4) {
a19 1
    flag ++;
d22 1
@


1.2
log
@*** empty log message ***
@
text
@a2 1
#include <stdlib.h>
d14 3
d19 8
a26 1
  pShip->SetOrder(O_THRUST,(rand()/RAND_MAX) * 30);
@


1.1
log
@*** empty log message ***
@
text
@d3 1
d17 1
a17 3

  pShip->SetOrder(O_SHIELD,3.0);
  pShip->SetOrder(O_THRUST,3.0);
@

