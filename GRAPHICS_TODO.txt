Requirements
- [x] Support a `--ship-art SNAME` CLI flag on every team binary (`mm4team`, `mm4team_<variant>`) so a team can opt into themed sprites without impacting default behaviour.
- [x] Preserve the existing default sprites when the flag is omitted, or when the observer is running without graphics (headless mode or legacy observer).
- [x] At runtime, load the sixteen-orientation sprite strip found at `assets/star_control/graphics/<FNAME>/<SNAME>/<SNAME>.big.0-15.png` and map each frame to the closest ship heading.
- [x] Ensure the chosen art applies per-team (a ChromeFunk vs Groogroo match can mix default and custom art).
- [x] Handle invalid or missing art gracefully (warn and fall back to default sprites).
- [x] Document usage so tournament runners know how to package custom ship art.

Project Plan
1. **Asset Discovery & Validation**
   - [x] Catalogue existing faction directories and confirm file naming (`.big.0.png` … `.big.15.png`).
   - [x] Decide default faction lookup order when `FNAME != SNAME` (e.g., allow explicit `FNAME:SNAME` or derive from config).
   - [x] Draft fallback rules for missing frames (e.g., reuse `0.png`).
2. **CLI & Config Plumbing**
   - [x] Extend the shared argument parser used by team binaries to accept `--ship-art`.
   - [x] Surface the parsed value through the legacy `CParser` shim so downstream code can query it.
   - [x] Gate the option so headless builds or legacy observers ignore custom art.
3. **Runtime Asset Loading**
   - [x] Implement a lightweight sprite loader that, given `SNAME`, resolves the filesystem path, loads 16 textures, and retains them per team.
   - [x] Integrate with existing graphics caching (likely `SpriteManager` or observer-specific texture tables).
   - [x] Add error logging and fallback to default sprites if any asset fails to load.
4. **Rendering Integration**
   - [x] In the observer’s ship draw routine, substitute the orientation-dependent texture when a team supplies custom art.
   - [x] Map ship heading (radians) to the nearest 1/16th-turn frame; ensure wraparound and support PI/2 “upwards” baseline.
   - [x] Honour thrust/shield overlays as optional: either composite legacy overlays or omit for simplicity.
   - [x] Ensure default rendering path remains unchanged for teams without custom art or when graphics are disabled.
5. **Testing & Tooling**
   - [ ] Add a smoke-test scenario (e.g., script launching two teams with different `--ship-art` flags) to verify sprite swaps and fallbacks.
   - [x] Update documentation with setup instructions and packaging expectations.

Project Milestones & Detailed TODOs
**Milestone 1: Baseline Analysis**
- [x] Inventory `assets/star_control/graphics` to list available `FNAME/SNAME` combos.
- [x] Confirm observer build paths can read those assets from runtime working directories.
- [x] Document file naming, orientation assumptions, and missing-frame behaviour.

**Milestone 2: CLI Extension**
- [x] Update `ArgumentParser` to accept `--ship-art` (team binaries only) and expose via `ParserModern`.
- [x] Thread the value into team launch paths (`mm4serv`→`CParser`→observer) ensuring it is logged for debugging.
- [ ] Add validation: ensure the requested `SNAME` directory exists before gameplay starts; fallback + warning otherwise.

**Milestone 3: Asset Management Layer**
- [x] Extend `SpriteManager` (or introduce a new `CustomShipSpriteSet`) with APIs to register per-team art based on `SNAME`.
- [x] On observer initialization, load default sprite sheet once; on first encounter of a team requesting custom art, load/cached textures.
- [x] Handle orientation mapping (0..15) and provide an accessor `GetCustomShipTexture(team_id, orientation_index)`.

**Milestone 4: Rendering Pipeline Integration**
- [x] Modify ship draw routine in `ObserverSDL::DrawShips` (and any other renderers) to check for custom art before drawing.
- [x] Implement angle→index logic, using heading + 90° offset so `.big.0.png` aligns with “up”.
- [x] Decide shield/thrust overlay strategy; either skip overlays for custom art or render legacy overlays on top.
- [x] Ensure non-SDL or legacy observers remain unaffected (guard with feature flag or compile-time switch).

**Milestone 5: QA & Documentation**
- [ ] Create a dev sample (e.g., `scripts/demo_ship_art.sh`) that launches a local observer with `--ship-art arilou`.
- [ ] Verify headless observer ignores the option and continues using default shapes.
- [x] Update README or new `docs/SHIP_ART.md` with instructions, asset requirements, and fallback behaviour.
- [ ] Capture final sign-off checklist (CLI parsing, rendering visuals, fallback warnings, docs updated).

Future Tasks
- [x] Randomly select ship art (excluding `yehat/shield`) when `--ship-art` is not provided, choosing between default legacy art and available custom packs.
- [x] For `yehat:yehat`, replace legacy shield overlays with `yehat/shield` sprites rendered using the ship's current orientation frame.
